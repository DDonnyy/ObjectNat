name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  PY_VER: "3.11"
  VENV_PATH: .venv
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"

jobs:
  prebuild:
    name: Build & cache venv (+ version check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Restore venv cache (if any)
        id: venv-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-py${{ env.PY_VER }}-all-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ env.PY_VER }}-

      - name: Check version consistency (pyproject vs _version.py)
        shell: bash
        run: |
          set -euo pipefail
          PYPROJECT_VERSION=$(python - <<'PY'
          import tomllib
          print(tomllib.load(open("pyproject.toml","rb"))["tool"]["poetry"]["version"])
          PY
          )
          VERSION_PY=$(grep -oP 'VERSION\s*=\s*"\K[^"]+' src/objectnat/_version.py)
          echo "pyproject: ${PYPROJECT_VERSION}"
          echo "_version.py: ${VERSION_PY}"
          [ "$PYPROJECT_VERSION" = "$VERSION_PY" ]

      - name: Install all deps (base + dev + test + docs)
        run: |
          poetry config virtualenvs.in-project true
          poetry install --with dev,test,docs

      - name: Save venv cache
        if: steps.venv-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-py${{ env.PY_VER }}-all-${{ hashFiles('**/poetry.lock') }}
  lint:
    name: Lint (black, isort, pylint)
    runs-on: ubuntu-latest
    needs: [ prebuild ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Restore venv cache
        id: venv
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-py${{ env.PY_VER }}-all-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ env.PY_VER }}-


      - name: Run linters
        run: |
          poetry run black --check src
          poetry run isort --check-only src
          poetry run pylint src/objectnat || true

  tests:
    name: Tests (pytest + coverage)
    runs-on: ubuntu-latest
    needs: [ prebuild ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Restore venv cache
        id: venv
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-py${{ env.PY_VER }}-all-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ env.PY_VER }}-

      - name: Run tests
        run: poetry run pytest src/tests --cov=objectnat --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          slug: DDonnyy/ObjectNat
          fail_ci_if_error: false

      - name: Commit and push test images to assets branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |

          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          if git ls-remote --exit-code --heads origin assets; then
            git fetch origin assets
            git checkout assets

          else
            git checkout --orphan assets
            git reset --hard
          fi
          rm -f ./*.png || echo "No old PNGs to remove"
          git rm -f ./*.png || echo "No old PNGs to remove from Git"
          cp -r src/tests/test_output/*.png . || echo "No images to copy"
          git add ./*.png
          git commit -m "Update test images" || echo "No changes to commit"
          git push --force origin assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Docs (Sphinx build + artifact / GH Pages)
    runs-on: ubuntu-latest
    needs: [ prebuild ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Restore venv cache
        id: venv
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.VENV_PATH }}
          key: venv-${{ runner.os }}-py${{ env.PY_VER }}-all-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ env.PY_VER }}-

      - name: Build Sphinx HTML
        run: poetry run sphinx-build -b html docs docs/_build/html

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/_build/html
          if-no-files-found: error

  deploy-docs:
    name: Deploy docs to gh-pages
    runs-on: ubuntu-latest
    needs: [ docs, lint, tests ]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download docs artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-html
          path: site

      - name: Publish to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          force_orphan: true
