name: CI Pipeline

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install toml

      - name: Extract version from pyproject.toml
        id: pyproject-version
        run: |
          PYPROJECT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "Version in pyproject.toml: $PYPROJECT_VERSION"
          echo "pyproject_version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT

      - name: Extract version from _version.py
        id: version-py
        run: |
          VERSION_PY=$(grep -oP 'VERSION = "\K[^"]+' src/objectnat/_version.py)
          echo "Version in _version.py: $VERSION_PY"
          echo "version_py=$VERSION_PY" >> $GITHUB_OUTPUT

      - name: Compare versions
        run: |
          if [ "${{ steps.pyproject-version.outputs.pyproject_version }}" != "${{ steps.version-py.outputs.version_py }}" ]; then
            echo "Versions do not match!"
            echo "pyproject.toml: ${{ steps.pyproject-version.outputs.pyproject_version }}"
            echo "_version.py: ${{ steps.version-py.outputs.version_py }}"
            exit 1
          else
            echo "Versions match!"
          fi

  check-formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run pylint
        run: |
          poetry run pylint src --exit-zero > pylint-report.txt

      - name: Upload pylint report
        uses: actions/upload-artifact@v4
        with:
          name: pylint-report
          path: pylint-report.txt

      - name: Run isort
        run: |
          poetry run isort --check-only src

      - name: Run black
        run: |
          poetry run black --check src

  test:
    runs-on: ubuntu-latest
    needs: [check-version, check-formatting]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests with coverage
        run: |
          poetry run pytest src/tests --cov=objectnat --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4.6.1
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
          slug: DDonnyy/ObjectNat

      - name: Commit and push test images to assets branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git stash
          git fetch origin assets || git checkout --orphan assets
          git switch assets || git checkout assets
          git restore --source=stash --staged --worktree -- test_output || git stash pop
          mkdir -p test_output
          cp -r test_output/*.png . || echo "No images to copy"
          git add *.png
          git commit -m "Update stepped coverage zone test images" || echo "No changes to commit"
          git push --force origin assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
