name: CI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Lint → Tests → Docs (single venv)
    runs-on: ubuntu-latest
    env:
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      POETRY_NO_INTERACTION: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: "1.8.3"

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-py3.11-${{ hashFiles('**/poetry.lock') }}

      # --- Check version (pyproject.toml vs _version.py)
      - name: Check version consistency
        shell: bash
        run: |
          set -euo pipefail
          PYPROJECT_VERSION=$(python - <<'PY'
          import tomllib
          print(tomllib.load(open("pyproject.toml","rb"))["tool"]["poetry"]["version"])
          PY
          )
          VERSION_PY=$(grep -oP 'VERSION\s*=\s*"\K[^"]+' src/objectnat/_version.py)
          echo "pyproject: ${PYPROJECT_VERSION}"
          echo "_version.py: ${VERSION_PY}"
          [ "$PYPROJECT_VERSION" = "$VERSION_PY" ]

      # --- Lint (dev only)
      - name: Install dev deps
        run: poetry install --no-root --only dev

      - name: Run linters
        run: |
          poetry run black --check src
          poetry run isort --check-only src
          poetry run pylint src/objectnat || true

      # --- Tests (+test deps поверх dev)
      - name: Install test deps incrementally
        run: poetry install --with test

      - name: Run tests
        run: poetry run pytest src/tests --cov=objectnat --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          slug: DDonnyy/ObjectNat
          fail_ci_if_error: false

      - name: Push test images to assets branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          if git ls-remote --exit-code --heads origin assets; then
            git fetch origin assets
            git checkout assets
            git merge --no-edit origin/assets || true
          else
            git checkout --orphan assets
            git reset --hard
          fi
          rm -f ./*.png || true
          git rm -f ./*.png || true
          mkdir -p tmp_images
          cp -r src/tests/test_output/*.png tmp_images/ 2>/dev/null || true
          if ls tmp_images/*.png 1> /dev/null 2>&1; then
            mv tmp_images/*.png .
            rm -rf tmp_images
            git add ./*.png
            git commit -m "Update test images" || echo "No changes to commit"
            git push --force origin assets
          else
            echo "No images to copy"
          fi

      - name: Install docs deps incrementally
        run: poetry install --with docs

      - name: Build docs (Sphinx)
        run: poetry run sphinx-build -b html docs docs/_build/html

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/_build/html
